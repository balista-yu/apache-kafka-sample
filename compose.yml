name: 'apache-kafka-sample'

services:
  zookeeper01:
    container_name: confluentinc-cp-zookeeper01-container
    hostname: confluentinc-cp-zookeeper01
    image: confluentinc/cp-zookeeper01:dev
    build:
      context: .
      dockerfile: ./infra/docker/zookeeper/Dockerfile
      cache_from:
        - confluentinc/cp-zookeeper:cache
    environment:
      ZOOKEEPER_SERVER_ID: 1 # Zookeeperクラスタを構成する各サーバに一意に割り当てられる識別子（myid）
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000 # 2000ミリ秒
      ZOOKEEPER_INIT_LIMIT: 10 # Zookeeperクラスタの初期接続のタイムアウト値（tickTime単位なので、2000×10で20秒）
      ZOOKEEPER_SYNC_LIMIT: 5 # Zookeeperクラスタの同期のタイムアウト値（tickTime単位なので、2000×5で10秒）
      ZOOKEEPER_SERVERS: zookeeper01:2888:3888;zookeeper02:2888:3888;zookeeper03:2888:3888
    ports:
      - "2181:2181"
    volumes:
      - apache-kafka-sample-zookeeper01-data-store:/var/lib/zookeeper/data
      - apache-kafka-sample-zookeeper01-log-store:/var/lib/zookeeper/log
      - apache-kafka-sample-zookeeper01-secrets-store:/etc/zookeeper/secrets
    networks:
      - apache-kafka-sample

  zookeeper02:
    container_name: confluentinc-cp-zookeeper02-container
    hostname: confluentinc-cp-zookeeper02
    image: confluentinc/cp-zookeeper02:dev
    build:
      context: .
      dockerfile: ./infra/docker/zookeeper/Dockerfile
      cache_from:
        - confluentinc/cp-zookeeper:cache
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_SERVERS: zookeeper01:2888:3888;zookeeper02:2888:3888;zookeeper03:2888:3888
    ports:
      - "2182:2181"
    volumes:
      - apache-kafka-sample-zookeeper02-data-store:/var/lib/zookeeper/data
      - apache-kafka-sample-zookeeper02-log-store:/var/lib/zookeeper/log
      - apache-kafka-sample-zookeeper02-secrets-store:/etc/zookeeper/secrets
    networks:
      - apache-kafka-sample

  zookeeper03:
    container_name: confluentinc-cp-zookeeper03-container
    hostname: confluentinc-cp-zookeeper03
    image: confluentinc/cp-zookeeper03:dev
    build:
      context: .
      dockerfile: ./infra/docker/zookeeper/Dockerfile
      cache_from:
        - confluentinc/cp-zookeeper:cache
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_SERVERS: zookeeper01:2888:3888;zookeeper02:2888:3888;zookeeper03:2888:3888
    ports:
      - "2183:2181"
    volumes:
      - apache-kafka-sample-zookeeper03-data-store:/var/lib/zookeeper/data
      - apache-kafka-sample-zookeeper03-log-store:/var/lib/zookeeper/log
      - apache-kafka-sample-zookeeper03-secrets-store:/etc/zookeeper/secrets
    networks:
      - apache-kafka-sample

  kafka01:
    container_name: confluentinc-cp-server01-container
    hostname: confluentinc-cp-server01
    image: confluentinc/cp-server01:dev
    build:
      context: .
      dockerfile: ./infra/docker/kafka/Dockerfile
      cache_from:
        - confluentinc/cp-server01:cache
    ports:
      - "9092:9092"
    restart: always
    environment:
      KAFKA_BROKER_ID: 1 # サーバ毎に定めたBroker ID（整数値）※Zookeeperのmyidと同じIDにする必要はない
      KAFKA_BROKER_ID_GENERATION_ENABLE: false # Kafkaが自動的にIDを付与する機能を無効にして手動でIDを設定する
      KAFKA_ZOOKEEPER_CONNECT: zookeeper01:2181,zookeeper02:2181,zookeeper03:2181 # BrokerがZookeeperへ接続する際の接続情報
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka01:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
    depends_on: # Zookeeperを先に起動させ、その後Brokerを起動
      - zookeeper01
      - zookeeper02
      - zookeeper03
    volumes:
      - apache-kafka-sample-kafka01-data-store:/var/lib/kafka/data
      - apache-kafka-sample-kafka01-secrets-store:/etc/kafka/secrets
    networks:
      - apache-kafka-sample

  kafka02:
    container_name: confluentinc-cp-server02-container
    hostname: confluentinc-cp-server02
    image: confluentinc/cp-server02:dev
    build:
      context: .
      dockerfile: ./infra/docker/kafka/Dockerfile
      cache_from:
        - confluentinc/cp-server02:cache
    ports:
      - "9093:9092"
    restart: always
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_BROKER_ID_GENERATION_ENABLE: false
      KAFKA_ZOOKEEPER_CONNECT: zookeeper01:2181,zookeeper02:2181,zookeeper03:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka02:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper01
      - zookeeper02
      - zookeeper03
    volumes:
      - apache-kafka-sample-kafka02-data-store:/var/lib/kafka/data
      - apache-kafka-sample-kafka02-secrets-store:/etc/kafka/secrets
    networks:
      - apache-kafka-sample

  kafka03:
    container_name: confluentinc-cp-server03-container
    hostname: confluentinc-cp-server03
    image: confluentinc/cp-server03:dev
    build:
      context: .
      dockerfile: ./infra/docker/kafka/Dockerfile
      cache_from:
        - confluentinc/cp-server03:cache
    ports:
      - "9094:9092"
    restart: always
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_BROKER_ID_GENERATION_ENABLE: false
      KAFKA_ZOOKEEPER_CONNECT: zookeeper01:2181,zookeeper02:2181,zookeeper03:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka03:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper01
      - zookeeper02
      - zookeeper03
    volumes:
      - apache-kafka-sample-kafka03-data-store:/var/lib/kafka/data
      - apache-kafka-sample-kafka03-secrets-store:/etc/kafka/secrets
    networks:
      - apache-kafka-sample

  kafka-connect:
    container_name: kafka-connect-container
    hostname: kafka-connect-server
    image: confluentinc/kafka-connect:dev
    build:
      context: .
      dockerfile: ./infra/docker/kafka-connect/Dockerfile
      cache_from:
        - confluentinc/kafka-connect:cache
    ports:
      - "8083:8083"
    restart: always
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka01:9092,kafka02:9092,kafka03:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/usr/share/filestream-connectors
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    volumes:
      - apache-kafka-sample-connect-data-store:/var/lib/kafka/data
      - apache-kafka-sample-connect-jars-store:/etc/kafka-connect/jars
      - apache-kafka-sample-kafka-connect-secrets-store:/etc/kafka-connect/secrets
      - apache-kafka-sample-connect-secrets-store:/etc/kafka/secrets
    depends_on:
      - kafka01
      - kafka02
      - kafka03
    networks:
      - apache-kafka-sample

  producer-app:
    container_name: producer-app-container
    hostname: producer-app-server
    image: node/app:dev
    build:
      context: .
      dockerfile: ./infra/docker/node/Dockerfile
      cache_from:
        - node/app:cache
    tty: true
    volumes:
      - ./producer-app:/var/www/app:cached
    networks:
      - apache-kafka-sample

  consumer-app:
    container_name: consumer-app-container
    hostname: consumer-app-server
    image: node/app:dev
    build:
      context: .
      dockerfile: ./infra/docker/node/Dockerfile
      cache_from:
        - node/app:cache
    tty: true
    volumes:
      - ./consumer-app:/var/www/app:cached
    networks:
      - apache-kafka-sample

  ec-data-server:
    container_name: ec-data-server-container
    hostname: ec-data-server
    image: ec-data-server/db:dev
    build:
      context: .
      dockerfile: ./infra/docker/postgresql/Dockerfile
      cache_from:
        - ec-data-server/db:cache
    restart: always
    ports:
      - "35432:5432"
    volumes:
      - apache-kafka-sample-postgresql-store:/var/lib/postgresql/data/
      - ./infra/docker/postgresql/init:/docker-entrypoint-initdb.d/
      - ./infra/docker/postgresql/conf/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_USER=${DB_USER:-connectuser}
      - POSTGRES_PASSWORD=${DB_PASS:-connectpass}
    networks:
      - apache-kafka-sample

  pos-data-server:
    container_name: pos-data-server-container
    hostname: pos-data-server
    image: pos-data-server/db:dev
    build:
      context: .
      dockerfile: ./infra/docker/mysql/Dockerfile
      cache_from:
        - pos-data-server/db:cache
    restart: always
    ports:
      - "33306:3306"
    volumes:
      - apache-kafka-sample-mysql-store:/var/lib/mysql
      - ./infra/docker/mysql/init:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASS:-secret}
      - MYSQL_DATABASE=${DB_NAME:-pos}
      - MYSQL_USER=${DB_USER:-connectuser}
      - MYSQL_PASSWORD=${DB_PASS:-connectpass}
    networks:
      - apache-kafka-sample

  localstack:
    container_name: sales-forecast-container
    hostname: sales-forecast-localstack
    image: sales-forecast/localstack:dev
    build:
      context: .
      dockerfile: ./infra/docker/localstack/Dockerfile
      cache_from:
        - sales-forecast/localstack:cache
    environment:
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=ap-northeast-1
    ports:
      - '127.0.0.1:34566:4566'
    volumes:
      - apache-kafka-sample-localstack-store:/var/lib/localstack
      - ./infra/docker/localstack/init/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - apache-kafka-sample

networks:
  apache-kafka-sample:
    driver: bridge

volumes:
  apache-kafka-sample-zookeeper01-data-store:
    name: apache-kafka-sample-zookeeper01-data-store
    driver: local
  apache-kafka-sample-zookeeper01-log-store:
    name: apache-kafka-sample-zookeeper01-log-store
    driver: local
  apache-kafka-sample-zookeeper01-secrets-store:
    name: apache-kafka-sample-zookeeper01-secrets-store
    driver: local
  apache-kafka-sample-zookeeper02-data-store:
    name: apache-kafka-sample-zookeeper02-data-store
    driver: local
  apache-kafka-sample-zookeeper02-log-store:
    name: apache-kafka-sample-zookeeper02-log-store
    driver: local
  apache-kafka-sample-zookeeper02-secrets-store:
    name: apache-kafka-sample-zookeeper02-secrets-store
    driver: local
  apache-kafka-sample-zookeeper03-data-store:
    name: apache-kafka-sample-zookeeper03-data-store
    driver: local
  apache-kafka-sample-zookeeper03-secrets-store:
    name: apache-kafka-sample-zookeeper03-secrets-store
    driver: local
  apache-kafka-sample-kafka01-data-store:
    name: apache-kafka-sample-kafka01-data-store
    driver: local
  apache-kafka-sample-kafka01-secrets-store:
    name: apache-kafka-sample-kafka01-secrets-store
    driver: local
  apache-kafka-sample-kafka02-data-store:
    name: apache-kafka-sample-kafka02-data-store
    driver: local
  apache-kafka-sample-kafka02-secrets-store:
    name: apache-kafka-sample-kafka02-secrets-store
    driver: local
  apache-kafka-sample-kafka03-data-store:
    name: apache-kafka-sample-kafka03-data-store
    driver: local
  apache-kafka-sample-kafka03-secrets-store:
    name: apache-kafka-sample-kafka03-secrets-store
    driver: local
  apache-kafka-sample-zookeeper03-log-store:
    name: apache-kafka-sample-zookeeper03-log-store
    driver: local
  apache-kafka-sample-connect-data-store:
    name: apache-kafka-sample-connect-data-store
    driver: local
  apache-kafka-sample-connect-jars-store:
    name: apache-kafka-sample-connect-jars-store
    driver: local
  apache-kafka-sample-kafka-connect-secrets-store:
    name: apache-kafka-sample-kafka-connect-secrets-store
    driver: local
  apache-kafka-sample-connect-secrets-store:
    name: apache-kafka-sample-connect-secrets-store
    driver: local
  apache-kafka-sample-postgresql-store:
    name: apache-kafka-sample-postgresql-store
    driver: local
  apache-kafka-sample-mysql-store:
    name: apache-kafka-sample-mysql-store
    driver: local
  apache-kafka-sample-localstack-store:
    name: apache-kafka-sample-localstack-store
    driver: local
